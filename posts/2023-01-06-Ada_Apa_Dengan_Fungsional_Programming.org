---
title: Ada Apa Dengan Paradigma Fungsional
author: aerphanas
desc: Paradigma fungsional adalah sebuah cara lain dalam menyelesaikan masalah dengan hanya menggunakan fungsi, berbeda dengan paradigma object oriented dan imperatif.
image: ada-apa-dengan-fungsional-programming-fig1.png
---

#+title: Ada Apa Dengan Paradigma Fungsional

#+author: aerphanas
#+caption: orang yang berasal dari gerbang ivory. oleh Lefteris
Papaulakis
[[../images/ada-apa-dengan-fungsional-programming-fig1.png]]

** Daftar Isi
:PROPERTIES:
:CUSTOM_ID: daftar-isi
:END:
- [[#pendahuluan][Pendahuluan]]
  - [[#perbedaan-dengan-oop][Perbedaan dengan oop]]
  - [[#kelebihan-functional-programming][Kelebihan Functional
    Programming]]
- [[#daftar-pustaka][Daftar Pustaka]]

** Pendahuluan
:PROPERTIES:
:CUSTOM_ID: pendahuluan
:END:

--------------

Paradigma Fungsional adalah sebuah alternatif dari OOP (Object Oriented
Programming), perbedaannya adalah bila oop semuanya adalah object maka
di fungsional semuanya adalah fungsi.

pada dahulu bahasa komputer terbagi menjadi 2, yaitu bahasa berbasis
mesin turing dan yang satunya berbasis lambda kalkulus, cara kerja
turing machine adalah memodifikasi sesuatu dan menghasilkan efek samping
(side effect) sedangkan program berbasis lamba kalkulus tidak melakukan
mutasi terhadap variable.

tapi karna bahasa fungsional tidak dapat mengubah sesuatu maka dibuatlah
sebuah solusi, diantaranya adalah menggunakan monad.

** Perbedaan Dengan OOP
:PROPERTIES:
:CUSTOM_ID: perbedaan-dengan-oop
:END:

--------------

kita bisa liat perbedan antara oop dengan fungsionalnya dengan jelas
pada tabel dibawah

| OOP Pattern/Principle           | Fungsional                |
|---------------------------------+---------------------------|
| Single Responsibility Principle | Functions                 |
| Open/Closed Principle           | Functions                 |
| Dependency Inversion Principle  | Functions, also           |
| Interface Segregation Principle | Functions                 |
| Factory Pattern                 | You will be assimilated ! |
| Strategy Pattern                | Function again            |
| Decorator Pattern               | Functions                 |
| Visitor Pattern                 | Resistance is futile!     |

** Kelebihan Functional Programming
:PROPERTIES:
:CUSTOM_ID: kelebihan-functional-programming
:END:

--------------

di paradigma fungsional tidak ada yang namanya design principle atau
pattern semuanya adalah fungsi, adapun kelebihan fungsional programming
adalah

*** first-class dan higher-order function
:PROPERTIES:
:CUSTOM_ID: first-class-dan-higher-order-function
:END:
yang dimaksud high-order fungsi adalah bahwa fungsi dapat menjadi sebuah
input untuk fungsi lain, sedangkan first-class adalah bahwa status
fungsi sama dengan data yang lainya.

contoh dalam bahasa racket (lisp dialects family) seperti ini :

#+begin_src scheme
#lang racket

; fungsi yang mengambil 1 input dan mengeluarkan 1 output
(define (return x)
  x)

; fungsi yang mengambil 2 input dan mengeluarkan 1 output
(define (add x y)
  (+ x y))

; fungsi yang mengambil 2 fungsi menjadi 1
(define add2 (return add))
#+end_src

*** pattern matching
:PROPERTIES:
:CUSTOM_ID: pattern-matching
:END:
di fungsional programming ada sebuah fungsi yang mirip dengan
=switch case= seperti bahasa Java atau C++

contoh dalam bahasa haskell :

#+begin_src haskell
doEncAlg::Int -> Int -> Int -> Int
doEncAlg a b x
    | DC.isAlpha . DC.chr $ x = doMath + initChar
    | otherwise               = x
    where
        initChar = if DC.isUpper $ DC.chr x then 65 else 97
        numChar  = x - initChar
        doMath   = (a * numChar + b) `mod` 26
#+end_src

dalam haskell pattern matching biasanya digunakan untuk monad.

*** type system
:PROPERTIES:
:CUSTOM_ID: type-system
:END:
type system atau tipe sistem adalah cara untuk menentukan jenis-jenis
nilai yang diizinkan dalam bahasa pemrograman dan operasi yang diizinkan
untuk dilakukan pada nilai-nilai tersebut. Dalam bahasa pemrograman
fungsional, sistem tipe merupakan alat yang penting untuk memastikan
kebenaran dari program dan mengijinkan compiler untuk menangkap
kesalahan pada saat compile, bukan membiarkan kesalahan tersebut muncul
sebagai runtime error.

contohnya adalah kode haskell diatas

#+begin_src haskell
doEncAlg::Int -> Int -> Int -> Int
#+end_src

yang artinya adalah bahwa fungsi =doEncAlg= menerima 3 variable bertipe
integer dan memberikan output integer, type system seperti ini sangatlah
membantu, karna error akan terjadi pada compile time (waktu kompilasi)
dan bukan pada runtime time (waktu saat kode dijalankan), disini juga
membuat kita bisa tau dengan mudah mengenai fungsi ini.

*** data structure
:PROPERTIES:
:CUSTOM_ID: data-structure
:END:
dalam fungsional programming terdapat kelebihan daripada paradigma yang
lain, diantaranya :

- Presisten: semua data dalam fungsional programming berupa immutable
  atau tidak dapat diubah, keuntungaanya adalah kita tidak perlu
  memikirkan tentang efek samping atau urutan operasi yang dilakukan.
- Concurrency: karna data bersifat Immutable maka kita dapat dengan aman
  membaginya antar thread sehingga kita dengan mudah membuat program
  concurrent.
- Modular: karna adanya first-class dan higher-order function kita
  dengan mudah dapat membagi beberapa program terpisah, dan juga dapat
  mengikuti filosofi UNIX

*** REPL
:PROPERTIES:
:CUSTOM_ID: repl
:END:
repl merupakan singkatan dari Read Evaluate Print Loop, kelebihan ini
hampir mirip dengan bahasa python, lua atau ruby, REPL sendiri pertama
kali ada pada bahasa program LISP, yang pada saat itu sangatlah berguna
karna programmer bahasa yang lain sibuk memperbaiki kodenya (debugging)
seorang lisp programmer lebih fokus pada masalah, namun pada saat itu
REPL tidak secepat saat ini.

*** lazy evaluation dan Partial application
:PROPERTIES:
:CUSTOM_ID: lazy-evaluation-dan-partial-application
:END:
bahasa program fungsional biasanya bersifat lazy evaluation yang artinya
adalah REPL tidak akan menjalankan kodenya jika tidak kita tidak
memerlukan outputnya sehingga memori yang dipakai bisa optimal.

sedangkan partial application adalah kita bisa menggunakan sebuah fungsi
yang mengambil 2 input tetapi kita bisa memberinya 1 setelah itu kita
dapat memberinya lagi, berkat adanya lazy evaluation maka tidak akan ada
error.

contoh kodenya dalam bahasa haskell :

#+begin_src haskell
add :: Int -> Int -> Int
add x y = x + y

add10 :: Int -> Int
add10 = add 10
#+end_src

diatas bisa dijelaskan bahwa fungsi add mengambil 2 input dan memberikan
1 output, tetapi kita bisa memanfaatkan lazy evaluate dan partial
application seperti fungsi =add10= yang hanya memerlukan 1 input.

** Daftar Pustaka
:PROPERTIES:
:CUSTOM_ID: daftar-pustaka
:END:

--------------

- Youtube\\
  → [[https://youtu.be/srQt1NAHYC0][Functional Design Patterns - Scott
  Wlaschin]]

- Haskell\\
  → [[https://haskell.org][Homepage]]

- Racket\\
  → [[https://racket-lang.org][Homepage]]

- Practical Adult Insights\\
  →
  [[https://www.practicaladultinsights.com/what-is-an-ivory-tower.htm][What
  is an Ivory Tower?]]
